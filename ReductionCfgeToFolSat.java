import java.util.Set;

public class ReductionCfgeToFolSat extends TPTPWriter{

    public String cfgeToFolSat(ContextfreeGrammar C1, ContextfreeGrammar C2){
        return encodingWordStructure(C1.alphabet) + encodingCYKTable(C1.variables, C1.rules) + encodingCYKTable(C2.variables, C2.rules) + encodingGrammarInequivalence(C1.startVariables, C2.startVariables);
    }

    /**
     * sub-formula: every position of the searched-for word contains exactly one letter
     * */
    private String encodingWordStructure(Set<String> alphabet){
        String folFormula = "(";
        folFormula += forAll("X") + "(";
        assert !alphabet.isEmpty() : "the alphabet is empty!";
        for (String letter : alphabet){

        }
        return folFormula + ")";
    }

    /**
     * sub-formula: representing the CYK Table
     * */
    private String encodingCYKTable(Set<String> variables, Set<String> rules){
        String folFormulaforSubwordLenthOne = subwordsLengthOne(variables, rules);
        String folFormulaforSubwordGreaterOne = subwordsGreaterOne(variables, rules);

        return "(" + forAll("X") + forAll("Y") + folFormulaforSubwordLenthOne + or() + folFormulaforSubwordGreaterOne + ")";
    }

    /**
     * sub-formula: CYK Table entries where sub-word has length 1 ie. V =>* w iff V -> sigma
     * */
    private String subwordsLengthOne(Set<String> variables, Set<String> rules){
        String folFormula = "";
        return folFormula;
    }

    /**
     * sub-formula: CYK Table entries where sub-word has length > 1 ie. V =>* w iff V -> AB
     * */
    private String subwordsGreaterOne(Set<String> variables, Set<String> rules){
        String folFormula = "";
        return folFormula;
    }

    /**
     * sub-formula: w is generated by C1 iff it is not generated by C2
     * */
    private String encodingGrammarInequivalence(Set<String> startVariablesC1, Set<String> startVariablesC2){
        return "(" + wordIsGenerated(startVariablesC1) + equivalent() + not() + wordIsGenerated(startVariablesC2) + ")";
    }

    /**
     * sub-formula: w is generated by C
     * */
    private String wordIsGenerated(Set<String> startVariables){
        String folFormula = "";
        return folFormula;
    }

}
